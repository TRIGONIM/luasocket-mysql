# mysql driver, based on luasocket

Fork of the ["resty.mysql"](https://github.com/openresty/lua-resty-mysql/blob/master/lib/resty/mysql.lua) module.

- –£–¥–∞–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç NGINX –∏ Openresty. –ú–æ–¥—É–ª—å –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –æ–¥–Ω–æ–≥–æ –ª–∏—à—å luasocket.
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ connection pool —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ (non-blocking) –∑–∞–ø—Ä–æ—Å–∞–º–∏ (100k `SELECT 2 + 3` –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞ 5.8 —Å–µ–∫ –ø—Ä–∏ `pool_size 5`, `workers 3`).
- [–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è](https://github.com/openresty/lua-resty-mysql/blob/master/README.markdown) –∞–∫—Ç—É–∞–ª—å–Ω–∞ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.

---

## Examples

–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∏–≤–µ–¥–µ–Ω—ã —Å –∑–∞–º–µ—Ä–∞–º–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞—Ü–∏—è—Ö. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∂—É—Ç—Å—è –Ω–µ–ª–æ–≥–∏—á–Ω—ã–º–∏, –ø–æ—ç—Ç–æ–º—É –ø–æ–¥ –ø—Ä–∏–º–µ—Ä–∞–º–∏ —è –æ–±—ä—è—Å–Ω—è—é –ø–æ—á–µ–º—É

### simple example

–ó–¥–µ—Å—å –≤—Å–µ —Ä–æ–≤–Ω–æ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏. –Ø –ø—Ä–∏–≤–æ–∂—É –ø—Ä–∏–º–µ—Ä —Å—Ä–∞–∑—É —Å –∑–∞–º–µ—Ä–æ–º —Å–∫–æ—Ä–æ—Å—Ç–∏, –ø–æ—ç—Ç–æ–º—É –æ–Ω –Ω–µ–º–Ω–æ–≥–æ —Å–ª–æ–∂–Ω–µ–µ, —á–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–π.

```lua
local mysql_conn_opts = {
	host     = host,
	port     = port,
	user     = mysql_user,
	password = mysql_pass,
	database = mysql_db,
	charset  = "utf8mb4",
}

local mysql = require("mysql")


local db, db_err = mysql.new()
if not db then
	print("[mysql] failed to initialize mysql: ", db_err)
	return false, db_err
end

local con_ok, con_err, con_errcode, con_sqlstate = db:connect(mysql_conn_opts)
if not con_ok then
	print("[mysql] failed to connect: ", con_err, ": ", con_errcode, " ", con_sqlstate)
	return false, con_err
end

local now = require("socket").gettime
local start = now()

local repeats = 100000
for i = 1, repeats do
	local q_res, q_err, q_errcode, q_sqlstate = db:query("SELECT 2 + 3 as sum")
	-- print("q_res", i, repeats, q_err, q_errcode, q_sqlstate, q_res and q_res[1].sum)
	repeats = repeats - 1

	if repeats == 0 then
		print("done in", now() - start) -- 7 sec for 100k requests.
	end
end
```


### async requests

–ï—Å–ª–∏ —É –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω copas, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (non-blocking). –í —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ —Å–∞–º—ã–π –º–∏–Ω–∏–º—É–º –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–∞ –æ—à–∏–±–∫–∏.

–ó–¥–µ—Å—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ "—Å–ø–∞–≤–Ω–∏—Ç—Å—è" 100 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (–∫–æ—Ä—É—Ç–∏–Ω). –ú–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–∞—Ç—å –æ—à–∏–±–∫–∏ "Too many connections", –Ω–æ –∞–ª–≥–æ—Ä–∏—Ç–º —É—Å—Ç—Ä–æ–µ–Ω —Ç–∞–∫, —á—Ç–æ —Å—Ä–∞–∑—É –∏–¥–µ—Ç –Ω–æ–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –ø–æ–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º.

```lua
local copas = require("copas")
local mysql = require("mysql")

local mysql_conn_opts = {
	host     = host,
	port     = port,
	user     = mysql_user,
	password = mysql_pass,
	database = mysql_db,
	charset  = "utf8mb4",
}

local function get_db(mysql_conn_opts)
	local db
	local con_ok, con_err
	while not con_ok do
		db = mysql.new() -- you need some checks for errors here. I skipped them for brevity
		db.sock = copas.wrap(db.sock) -- now the connection is non-blocking. Further use is only allowed inside copas.addthread

		con_ok, con_err = db:connect(mysql_conn_opts)
		-- if not con_ok then -- you can uncomment this for delay before new connection against ddosing your db
		-- 	print("[mysql] failed to connect: ", con_err)
		-- 	copas.sleep(1)
		-- end
	end
	return db
end


local function do_query(q, callback)
	copas.addnamedthread("mysql_async_query", function()
		local db = get_db(mysql_conn_opts)

		local q_res, q_err, q_errcode, q_sqlstate = db:query(q)
		callback(q_res, q_err, q_errcode, q_sqlstate)
	end)
end


local now = require("socket").gettime
local start = now()

local repeats = 100
for i = 1, repeats do
	do_query("SELECT 2 + 3 as sum", function(q_res, q_err, q_errcode, q_sqlstate)
		-- print("q_res", i, repeats, q_err, q_errcode, q_sqlstate, q_res and q_res[1].sum)
		repeats = repeats - 1

		if repeats == 0 then
			print("done in", now() - start) -- 100 requests for 1.8 sec with max_connections = 5 in mysql.cnf
		end
	end)
end

copas.loop()
```

### using connection polling

–≠—Ç–æ –º–µ—Ç–æ–¥, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å mysql —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö. –¢–∞–∫–∂–µ –ø—É–ª —Å–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ª–µ–¥–∏—Ç –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã –ë–î –Ω–µ "–æ—Ç–≤–∞–ª–∏–ª–∞—Å—å" –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –Ω–µ–π.

- Connection pooling —Ç—Ä–µ–±—É–µ—Ç [copas](https://github.com/lunarmodules/copas/tree/master) –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤. –° –º–æ–¥—É–ª–µ–º —Å–∞–º –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è
- `pool:query(query, callback, timeout)` ‚Äì –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è. –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å, —Å–∞–º–æ –ø–æ–¥–±–∏—Ä–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–Æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –∫–æ–ª–±–µ–∫–µ. –ü—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î, —á–µ—Ä–µ–∑ (timeout or 10) sec –≤ –∫–æ–ª–±–µ–∫–µ –≤–µ—Ä–Ω–µ—Ç –æ—à–∏–±–∫—É "timeout"
- –ï—Å–ª–∏ —Ç–µ—Ä—è–µ—Ç—Å—è –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å—Å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î, —Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–µ—Ç–æ–¥ `pool:on_connection_error(err)`. –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–Ω–æ –æ–≤–µ—Ä—Ä–∞–π–¥–Ω—É—Ç—å, —á—Ç–æ–±—ã –∑–∞–º–µ–Ω–∏—Ç—å –≤–Ω—É—Ç—Ä–∏ `copas.sleep(5)` (–≤—Ä–µ–º—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è) –∏ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –ª–æ–≥–≥–∏–Ω–≥ –≤–º–µ—Å—Ç–æ `print(err)`.

```lua
local pool = require("mysql.pool").new({
	pool_size = 5,
	workers   = 3,
	mysql_opts = {
		host      = host,
		port      = port,
		user      = mysql_user,
		password  = mysql_pass,
		database  = mysql_db,
		charset   = "utf8mb4"
	},
})

local now = require("socket").gettime
local start = now()

local repeats = 100000
for i = 1, repeats do
	pool:query("SELECT 2 + 3", function(q_res, q_err, q_errcode, q_sqlstate)
		repeats = repeats - 1

		if repeats == 0 then
			print("done in", now() - start) -- üî• 100k for 6 sec
		end
	end, 5) -- timeout for waiting reconnection if database connection lost before request. Default 10
end

require("copas").loop()
```

## Why benchmarks seems strange?

1. –ü—Ä–æ—Å—Ç—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã 100k –∑–∞ 7 —Å–µ–∫
2. –ü—Ä–æ—Å—Ç—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã 100 (–Ω–µ —Ç—ã—Å) –∑–∞ 2 —Å–µ–∫
3. Connection pooling 100k –∑–∞ 6 —Å–µ–∫

> –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–æ–¥–∏–ª–∏—Å—å —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –Ω–∞ `max_connections = 5`, –≤—ã–ø–æ–ª–Ω—è—è —Å–∞–º—ã–π –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å.

1. –ï—Å–ª–∏ –±—ã –≤ –ø–µ—Ä–≤–æ–º —Å–ª—É—á–∞–µ –∑–∞–ø—Ä–æ—Å—ã –±—ã–ª–∏ "–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏" –∏ –∫–∞–∫–æ–π-—Ç–æ –∏–∑ –Ω–∏—Ö –∑–∞–Ω–∏–º–∞–ª –±—ã 2 —Å–µ–∫, —Ç–æ –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–∏—Å–ª–æ –±—ã –Ω–∞ 2 —Å–µ–∫.
2. –ï—Å–ª–∏ –±—ã max_connections —Ä–æ–≤–Ω—è–ª—Å—è –±—ã –∫–æ–ª-–≤—É –∑–∞–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ(!) –≤—ã–ø–æ–ª–Ω—è–µ–º, –ø—Ä–∏ —ç—Ç–æ–º –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω—è–ª—Å—è –±—ã –ø–æ 2 —Å–µ–∫, —Ç–æ –æ–Ω–∏ –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å –±—ã **–≤—Å–µ** —á–µ—Ä–µ–∑ 2 —Å–µ–∫. –ö –ø—Ä–∏–º–µ—Ä—É, –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç –≤—ã–ø–æ–ª–Ω—è–ª –±—ã 100–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ `100k * 2sec = 55 hours`
3. –í —Ç—Ä–µ—Ç—å–µ–º –ø—Ä–∏–º–µ—Ä–µ –Ω–∞–º –ø–æ—á—Ç–∏ –Ω–µ –≤–∞–∂–Ω–∞ `max_connections` –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤ –ë–î. –û–Ω –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –±—É–¥–µ—Ç —Å–∞–º—ã–º –±—ã—Å—Ç—Ä—ã–º. –ë—É–¥—å –∑–∞–ø—Ä–æ—Å—ã –¥–ª–∏—Ç–µ–ª—å–Ω—ã–µ –∏–ª–∏ –±—ã—Å—Ç—Ä—ã–µ ‚Äì —ç—Ç–æ –Ω–µ –∏–º–µ–ª–æ –±—ã –∑–Ω–∞—á–µ–Ω–∏—è.
